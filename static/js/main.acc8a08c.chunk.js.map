{"version":3,"sources":["components/graph.js","App.js","reportWebVitals.js","index.js"],"names":["fetched","a","axios","get","res","data","dataXY","map","item","x","diagnosed_date","y","count","graphData","datasets","label","backgroundColor","bordorColor","bordorWidth","hoverBackgroundColor","hoverBordorColor","pointHitRadius","console","error","Graph","useState","fetchData","getData","latestDate","getDate","latestInfected","getInfected","currentChart","setChart","useEffect","then","slice","splitDate","split","catch","err","log","options","responsive","maintainAspectRatio","scales","yAxes","display","scaleLabel","fontSize","xAxes","type","time","unit","minUnit","distributions","plugins","zoom","enabled","drag","borderColor","borderWidth","animationDuration","mode","speed","onZoom","chart","tooltips","intersect","hover","style_explain","onDoubleClick","resetZoom","style","padding","fontWeight","color","width","height","margin","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acc8a08c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport 'chartjs-plugin-zoom';\nimport axios from 'axios';\n\nconst fetched = async () => {\n    try {\n        const res = await axios.get(\"https://raw.githubusercontent.com/tokyo-metropolitan-gov/covid19/master/data/daily_positive_detail.json\");\n        const data = (res.data).data;\n        //const dates = data.map(item => item.diagnosed_date);\n        //const counts = data.map(item => item.count);\n        //console.log(dates, counts);\n\n        // https://stackoverflow.com/questions/63271287/chartjs-plugin-zoom-plugin-does-not-change-x-axis-labels\n        // X: date, Y: count\n        const dataXY = data.map(item => {\n            return {\n                x: item.diagnosed_date,\n                y: item.count\n            };\n        });\n        //console.log(dataXY)\n\n        const graphData = {\n            datasets: [\n                {\n                    label: \"東京都の感染者数\",\n                    data: dataXY,\n                    backgroundColor: 'rgba(255,100,100,0.6)',\n                    bordorColor: 'rgba(255,100,100,1)',\n                    bordorWidth: 1,\n                    hoverBackgroundColor: 'rgba(255,100,100,0.9)',\n                    hoverBordorColor: 'rgba(255,100,100,1)',\n                    pointHitRadius: 20,\n                },\n            ]\n        };\n        return graphData;\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nconst Graph = () => {\n    // State\n    const [fetchData, getData] = useState({});\n    const [latestDate, getDate] = useState(\"\");\n    const [latestInfected, getInfected] = useState(0);\n    const [currentChart, setChart] = useState({});\n\n    useEffect(() => {\n        fetched().then(graphData => {\n            getData(graphData);\n            getInfected((graphData.datasets[0].data.slice(-1)[0]).y);\n            const splitDate = ((graphData.datasets[0].data.slice(-1)[0]).x).split('-');\n            getDate((+splitDate[0]) + \"年\" + (+splitDate[1]) + \"月\" + (+splitDate[2]) + \"日\");\n        }).catch(err => {\n            console.log(err);\n        });\n    }, [ fetchData, latestDate, latestInfected, currentChart ]);\n    \n    const options = {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n            yAxes: [{\n                display: true,\n                scaleLabel: {\n                    display: true,\n                    fontSize: 15,\n                },\n            }],\n            xAxes: [{\n                type: 'time',\n                time: {\n                    unit: 'day',\n                    minUnit: 'day',\n                },\n                distributions: 'series',\n                display: true,\n                scaleLabel: {\n                    display: true,\n                    fontSize: 15,\n                },\n            }],\n        },\n        plugins: {\n            zoom: {\n                zoom: {\n                    enabled: true,\n                    drag: {\n                        borderColor: 'rgba(255,255,255,0.3)',\n                        borderWidth: 3,\n                        backgroundColor: 'rgba(184,184,184,0.8)',\n                        animationDuration: 0\n                    },\n                    mode: 'x',\n                    speed: 0.1,\n                    onZoom: function({chart}) {\n                        setChart(chart);\n                    }\n                },\n            },\n        },\n        tooltips: {\n            mode: 'index',\n            intersect: false,\n        },\n        hover: {\n            mode: 'nearest',\n            intersect: true,\n            animationDuration: 0\n        },\n    };\n\n    // CSS(めんどうなので...いつか移すこと)\n    const style_infected = {\n        fontWeight: \"bold\",\n        color: \"red\",\n        fontSize: \"2vw\",\n    };\n    const style_explain = {\n        fontSize: \"1vw\",\n    };\n\n    const style_infected_person = {\n        fontSize: \"2vw\",\n        padding: \"0.5vw\",\n    };\n\n    const chart_container = {\n        width: \"90vw\",\n        height: \"85vw\",\n        margin: \"auto\",\n        padding: \"5vw\",\n    }\n\n    return (\n        <div onDoubleClick={currentChart.resetZoom}>\n            <header style={style_infected_person}>{latestDate} の 感染者 は <span style={style_infected}>{latestInfected}</span> 人です</header>\n            <div style={style_explain}>ドラッグして範囲選択をすることで範囲を狭めることができます</div>\n            <div style={style_explain}>ダブルクリックで元の倍率のグラフに戻すことができます</div>\n            <div style={chart_container}>\n                <Bar data={fetchData} options={options}></Bar>\n            </div>\n        </div>\n    );\n};\n\nexport default Graph;\n","import './App.css';\n\nimport Graph from './components/graph';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Graph></Graph>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}